PROGRAMA
program id par_ab par_ce num coma cad punto_coma punto var begin end asignar read write writec writeln if then while do for to op_or op_adit op_and op_mult op_not
PROGRAMA DECL SENT RSENT SENTC EXPR INSTR EAND ARIT EREL TERM FACT RANDO LISTA RLISTA EXPRP EANDP ERELP ARITP TERMP
PROGRAMA -> program id punto_coma DECL SENTC punto
LISTA -> id RLISTA
RLISTA -> coma id RLISTA
RLISTA -> lambda
DECL -> var LISTA punto_coma
DECL -> lambda
SENTC -> begin SENT end
SENT -> INSTR RSENT
RSENT -> INSTR RSENT
RSENT -> lambda
INSTR -> punto_coma
INSTR -> id asignar EXPR punto_coma
INSTR -> SENTC
INSTR -> read id punto_coma
INSTR -> write EXPR punto_coma
INSTR -> writec cad punto_coma
INSTR -> writeln punto_coma
INSTR -> if EXPR then SENT
INSTR -> while EXPR do SENT
INSTR -> do SENT while EXPR punto_coma
INSTR -> for id asignar EXPR to EXPR do SENT
EXPR -> EAND EXPRP
EXPRP -> op_or EAND EXPRP
EXPRP -> lambda
EAND -> EREL EANDP
EANDP -> op_and EREL EANDP
EANDP -> lambda
EREL -> ARIT ERELP
ERELP -> op_rel ARIT ERELP
ERELP -> lambda
ARIT -> TERM ARITP
ARITP -> op_adit TERM ARITP
ARITP -> lambda
TERM -> FACT TERMP
TERMP -> op_mult FACT TERMP
TERMP -> lambda
FACT -> RANDO
FACT -> op_adit FACT
FACT -> op_not FACT
RANDO -> num
RANDO -> id
RANDO -> par_ab EXPR par_ce